name: "Experimental Release"
concurrency: release
on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/release.yml'
      - 'android/**'
      - 'build-data/**'
      - 'cataclysm-launcher'
      - 'data/**'
      - 'doc/**'
      - 'gfx/**'
      - 'lang/po/*.po'
      - 'LICENSE*'
      - 'Makefile'
      - 'README*'
      - 'src/**'
  workflow_dispatch:
    # manual trigger

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      timestamp: ${{ steps.get-timestamp.outputs.time }}
    steps:
      - name: Get build timestamp
        id: get-timestamp
        run: |
          echo "time=$(/bin/date -u "+%Y-%m-%d-%H%M")" >> $GITHUB_OUTPUT
      - name: Generate environmental variables
        id: generate_env_vars
        run: |
          echo "tag_name=cdda-experimental-${{ steps.get-timestamp.outputs.time }}" >> $GITHUB_OUTPUT
          echo "release_name=Cataclysm-DDA experimental build ${{ steps.get-timestamp.outputs.time }}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
      - run: |
          gh release create ${{ steps.generate_env_vars.outputs.tag_name }} --generate-notes --prerelease --title "${{ steps.generate_env_vars.outputs.release_name }}"

  builds:
    needs: release
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows Tiles x64 MSVC
            artifact: windows-tiles-x64-msvc
            arch: x64
            os: windows-2019
            mxe: none
            ext: zip
            content: application/zip
            sound: 0
          - name: Windows Tiles x64
            mxe: x86_64
            artifact: windows-tiles-x64
            os: ubuntu-latest
            ext: zip
            content: application/zip
            sound: 0
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    permissions: write-all
    env:
        ZSTD_CLEVEL: 17
    steps:
      - name: Set environment variables (windows msvc)
        if: runner.os == 'Windows'
        run: |
          echo "CCACHE_VERSION=4.8.3" >> $env:GITHUB_ENV
          echo "CCACHE_LIMIT=8GB" >> $env:GITHUB_ENV
          echo "CDDA_CCACHE_PATH=${{ github.workspace }}\ccache\" >> $env:GITHUB_ENV
          echo "CDDA_USE_CCACHE=true" >> $env:GITHUB_ENV
          echo "CCACHE_HARDLINK=true" >> $env:GITHUB_ENV
      - uses: actions/checkout@v3
      - name: Use GNU tar to enable zstd for actions/cache (windows msvc)
        if: runner.os == 'Windows'
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
        shell: cmd
      - name: Install dependencies (windows msvc) (0/3)
        if: runner.os == 'Windows'
        uses: lukka/get-cmake@latest
      - name: Install dependencies (windows msvc) (1/3)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.3.1
      - name: Install dependencies (windows msvc) (2/3)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: '66444e13a86da7087ee24c342f91801cc6eb9877'
      - name: Install dependencies (windows msvc) (3/3)
        if: runner.os == 'Windows'
        run: |
          vcpkg integrate install --vcpkg-root '${{ runner.workspace }}\b\vcpkg'
      - name: Install dependencies (windows mxe)
        if: matrix.mxe != 'none' && matrix.artifact != 'windows-objectcreator-x64'
        run: |
          sudo apt install gettext
      - name: Install MXE
        if: matrix.mxe != 'none' && matrix.artifact != 'windows-objectcreator-x64'
        run: |
          curl -L -o mxe-${{ matrix.mxe }}.tar.xz https://github.com/BrettDong/MXE-GCC/releases/download/mxe-sdl-2-0-20/mxe-${{ matrix.mxe }}.tar.xz
          curl -L -o mxe-${{ matrix.mxe }}.tar.xz.sha256 https://github.com/BrettDong/MXE-GCC/releases/download/mxe-sdl-2-0-20/mxe-${{ matrix.mxe }}.tar.xz.sha256
          shasum -a 256 -c ./mxe-${{ matrix.mxe }}.tar.xz.sha256
          sudo tar xJf mxe-${{ matrix.mxe }}.tar.xz -C /opt
          curl -L -o SDL2-devel-2.26.2-mingw.tar.gz https://github.com/libsdl-org/SDL/releases/download/release-2.26.2/SDL2-devel-2.26.2-mingw.tar.gz
          shasum -a 256 -c ./build-scripts/SDL2-devel-2.26.2-mingw.tar.gz.sha256
          sudo tar -xzf SDL2-devel-2.26.2-mingw.tar.gz -C /opt/mxe/usr/${{ matrix.mxe }}-w64-mingw32.static.gcc12 --strip-components=2 SDL2-2.26.2/${{ matrix.mxe }}-w64-mingw32
          curl -L -o libbacktrace-${{ matrix.mxe }}-w64-mingw32.tar.gz https://github.com/Qrox/libbacktrace/releases/download/2020-01-03/libbacktrace-${{ matrix.mxe }}-w64-mingw32.tar.gz
          shasum -a 256 -c ./build-scripts/libbacktrace-${{ matrix.mxe }}-w64-mingw32-sha256
          sudo tar -xzf libbacktrace-${{ matrix.mxe }}-w64-mingw32.tar.gz --exclude=LICENSE -C /opt/mxe/usr/${{ matrix.mxe }}-w64-mingw32.static.gcc12
      - name: Create VERSION.TXT
        shell: bash
        run: |
          cat >VERSION.txt <<EOL
          build type: ${{ matrix.artifact }}
          build number: ${{ needs.release.outputs.timestamp }}
          commit sha: ${{ github.sha }}
          commit url: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
          EOL
      - name: Compile translations (windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          lang/compile_mo.sh all
      - name: Build CDDA (windows mxe)
        if: matrix.mxe != 'none' && matrix.artifact != 'windows-objectcreator-x64'
        env:
          PLATFORM: /opt/mxe/usr/bin/${{ matrix.mxe }}-w64-mingw32.static.gcc12-
        run: |
          make -j$((`nproc`+0)) CROSS="${PLATFORM}" TILES=1 SOUND=1 RELEASE=1 LOCALIZE=1 LANGUAGES=all BACKTRACE=1 PCH=0 bindist
          mv cataclysmdda-0.I.zip cdda-${{ matrix.artifact }}-${{ needs.release.outputs.timestamp }}.zip
      - name: Download ccache (windows msvc)
        if: runner.os == 'Windows'
        uses: robinraju/release-downloader@v1.4
        with:
          repository: 'ccache/ccache'
          tag: 'v${{ env.CCACHE_VERSION }}'
          fileName: 'ccache-${{ env.CCACHE_VERSION }}-windows-x86_64.zip'
      - name: Install ccache (windows msvc)
        id: install-ccache
        if: runner.os == 'Windows'
        run: |
          unzip ccache-${{ env.CCACHE_VERSION }}-windows-x86_64.zip
          cp ccache-${{ env.CCACHE_VERSION }}-windows-x86_64/ccache.exe ccache-${{ env.CCACHE_VERSION }}-windows-x86_64/cl.exe
          cp ccache-${{ env.CCACHE_VERSION }}-windows-x86_64/ccache.exe ccache-${{ env.CCACHE_VERSION }}-windows-x86_64/clang-cl.exe
          mv ccache-${{ env.CCACHE_VERSION }}-windows-x86_64 ${{ env.CDDA_CCACHE_PATH }}
      - name: Get ccache vars (windows msvc)
        id: get-vars
        if: runner.os == 'Windows'
        run: |
          echo "datetime=$(/bin/date -u "+%Y%m%d%H%M")" >> $GITHUB_OUTPUT
          echo "ccache-path=$(echo "$LOCALAPPDATA\\ccache")" >> $GITHUB_OUTPUT
        shell: bash
      - name: ccache cache files (windows msvc)
        if: runner.os == 'Windows'
        uses: actions/cache@v3
        with:
          path: ${{ steps.get-vars.outputs.ccache-path }}
          # double-dash after compiler is not a typo, it is to disambiguate between g++-<date> and g++-11-<date> for restore key prefix matching
          key: ccache-${{ github.ref_name }}-${{ runner.os }}-msvc--${{ steps.get-vars.outputs.datetime }}
          restore-keys: |
            ccache-master-${{ runner.os }}-msvc--
      - name: Configure ccache (windows msvc)
        if: runner.os == 'Windows'
        run: |
          ${{ env.CDDA_CCACHE_PATH }}\ccache.exe -M 10G
          ${{ env.CDDA_CCACHE_PATH }}\ccache.exe -s -v
          ${{ env.CDDA_CCACHE_PATH }}\ccache.exe -z
      - name: Symlink intermediates to C (windows msvc)
        if: runner.os == 'Windows'
        run: |
          mkdir -p "$env:TEMP\objwin"
          New-Item -ItemType SymbolicLink -Target "$env:TEMP\objwin" objwin
      - name: Build CDDA (windows msvc)
        if: runner.os == 'Windows'
        env:
          # Enable pretty backtraces
          BACKTRACE: 1
          CDDA_RELEASE_BUILD: 1
          VCPKG_OVERLAY_TRIPLETS: ${{ github.workspace }}\.github\vcpkg_triplets
        run: |
          msbuild -m -p:Configuration=Release -p:Platform=${{ matrix.arch }} "-target:Cataclysm-vcpkg-static;JsonFormatter-vcpkg-static" msvc-full-features\Cataclysm-vcpkg-static.sln
          .\build-scripts\windist.ps1
          mv cataclysmdda-0.I.zip cdda-${{ matrix.artifact }}-${{ needs.release.outputs.timestamp }}.zip    
      - name: Post-build ccache manipulation (windows msvc)
        if: ${{ !failure() && runner.os == 'Windows' }}
        run: |
          ${{ env.CDDA_CCACHE_PATH }}\ccache.exe -s -v
          ${{ env.CDDA_CCACHE_PATH }}\ccache.exe -M ${{ env.CCACHE_LIMIT }}
          ${{ env.CDDA_CCACHE_PATH }}\ccache.exe -c
          ${{ env.CDDA_CCACHE_PATH }}\ccache.exe -s -v
      - name: Don't upload vcpkg cache on failure (windows msvc)
        if: ${{ failure() || cancelled() && runner.os == 'Windows' }}
        run: |
          echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV
        shell: bash
      - run: |
          gh release upload cdda-experimental-${{ needs.release.outputs.timestamp }} cdda-${{ matrix.artifact }}-${{ needs.release.outputs.timestamp }}.${{ matrix.ext }}
